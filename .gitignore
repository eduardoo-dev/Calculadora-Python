import tkinter as tk
from tkinter import messagebox
import math
from functools import partial
import sympy as sp
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn2_circles

def abrir_janela(titulo, funcao_calculo):
    def calcular():
        try:
            # Convert entries to float and handle different function argument counts
            if funcao_calculo == resolver_expressao:
                valores = [entry.get() for entry in entries]
                resultado = funcao_calculo(*valores)
            else:
                valores = [float(entry.get()) for entry in entries]
                resultado = funcao_calculo(*valores)
            
            resultado_label.config(text=f"Resultado: {resultado}", fg="white")
        except ValueError:
            messagebox.showerror("Erro", "Digite valores num√©ricos v√°lidos!")
        except Exception as e:
            messagebox.showerror("Erro", str(e))

    def gerar_campos():
        try:
            qtd = int(entry_qtd.get()) * 2 + 1
            for widget in frame_campos.winfo_children():
                widget.destroy()
            nonlocal entries
            entries = []
            for i in range(qtd):
                tk.Label(frame_campos, text=f"Valor {i+1}:", bg="#002147", fg="white").pack()
                entry = tk.Entry(frame_campos, font=("Arial", 14), bg="white", fg="black", justify="center")
                entry.pack(pady=2, padx=20)
                entries.append(entry)
        except ValueError:
            messagebox.showerror("Erro", "Digite um n√∫mero v√°lido de vari√°veis!")

    janela = tk.Toplevel(root)
    janela.title(titulo)
    janela.configure(bg="#002147")
    janela.geometry("400x500")

    tk.Label(janela, text=titulo, font=("Arial", 16, "bold"), bg="#002147", fg="yellow").pack(pady=10)

    entries = []
    frame_campos = tk.Frame(janela, bg="#002147")
    frame_campos.pack()

    if funcao_calculo == regra_de_tres_composta:
        tk.Label(janela, text="Quantidade de Vari√°veis:", bg="#002147", fg="white").pack()
        entry_qtd = tk.Entry(janela, font=("Arial", 14), bg="white", fg="black", justify="center")
        entry_qtd.pack(pady=5)
        tk.Button(janela, text="Gerar Campos", font=("Arial", 12, "bold"), bg="#FFD700", fg="black",
                  command=gerar_campos).pack(pady=5)
    else:
        for i in range(funcao_calculo.__code__.co_argcount):
            tk.Label(frame_campos, text=f"Valor {i+1}:", bg="#002147", fg="white").pack()
            entry = tk.Entry(frame_campos, font=("Arial", 14), bg="white", fg="black", justify="center")
            entry.pack(pady=2, padx=20)
            entries.append(entry)

    resultado_label = tk.Label(janela, text="", font=("Arial", 14, "bold"), bg="#002147", fg="white")
    resultado_label.pack(pady=10)

    botao_calcular = tk.Button(janela, text="Calcular", font=("Arial", 14, "bold"), bg="#FFD700", fg="black",
                               command=calcular, relief="raised", borderwidth=3)
    botao_calcular.pack(pady=10)

    fechar_botao = tk.Button(janela, text="Fechar", font=("Arial", 14, "bold"), bg="#FFD700", fg="black",
                             command=janela.destroy)
    fechar_botao.pack(pady=10)

# Math Functions
def somar(a, b): return a + b
def subtrair(a, b): return a - b
def multiplicar(a, b): return a * b
def dividir(a, b):
    if b == 0:
        raise ValueError("Divis√£o por zero n√£o √© permitida")
    return a / b

def potencia(a, b): return a ** b
def raiz_quadrada(a): 
    if a < 0:
        raise ValueError("Raiz quadrada de n√∫mero negativo n√£o √© permitida")
    return math.sqrt(a)

def bhaskara(a, b, c):
    if a == 0:
        raise ValueError("O valor de 'a' n√£o pode ser zero")
    delta = b**2 - 4*a*c
    if delta < 0:
        return "Sem ra√≠zes reais"
    elif delta == 0:
        return f"x = {-b / (2*a):.2f}"
    else:
        x1 = (-b + math.sqrt(delta)) / (2*a)
        x2 = (-b - math.sqrt(delta)) / (2*a)
        return f"x1 = {x1:.2f}, x2 = {x2:.2f}"

def sistema_linear(a1, b1, c1, a2, b2, c2):
    determinante = a1 * b2 - a2 * b1
    if determinante == 0:
        return "O sistema n√£o tem solu√ß√£o √∫nica"
    x = (c1 * b2 - c2 * b1) / determinante
    y = (a1 * c2 - a2 * c1) / determinante
    return f"x = {x:.2f}, y = {y:.2f}"

def regra_de_tres(a, b, c):
    if a == 0:
        raise ValueError("O primeiro valor n√£o pode ser zero")
    resultado = (b * c) / a
    return f"x = {resultado:.2f}"

def regra_de_tres_composta(*valores):
    if len(valores) % 2 == 0:
        raise ValueError("N√∫mero de valores inv√°lido (deve ser √≠mpar)")
    produto = 1
    for i in range(0, len(valores) - 1, 2):
        if valores[i] == 0:
            raise ValueError("N√£o pode haver divis√£o por zero")
        produto *= valores[i+1] / valores[i]
    resultado = valores[-1] * produto
    return f"x = {resultado:.2f}"

def proporcao(a, b, c):
    if b == 0:
        raise ValueError("O valor b n√£o pode ser zero")
    d = (b * c) / a
    return f"d = {d:.2f}"

import tkinter as tk
from tkinter import messagebox
import math
from functools import partial
import sympy as sp
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn2_circles

def resolver_expressao(algebraica):
    try:
        # Verifica se a entrada cont√©m um sinal de igualdade
        if "=" in algebraica:
            lhs, rhs = algebraica.split("=")
            equacao = sp.Eq(sp.sympify(lhs.strip()), sp.sympify(rhs.strip()))
            resultado = sp.solve(equacao)
        else:
            expressao = sp.sympify(algebraica)
            resultado = sp.simplify(expressao)
        return f"Resultado: {resultado}"
    except Exception as e:
        return f"Erro: {str(e)}"


def conjunto_numeros():
    def calcular_conjunto():
        try:
            conjunto1 = entry_conjunto1.get()
            conjunto2 = entry_conjunto2.get()
            operacao = operacao_var.get()

            if not conjunto1 or not conjunto2:
                raise ValueError("Os conjuntos n√£o podem estar vazios")

            set1 = set(map(int, conjunto1.split(',')))
            set2 = set(map(int, conjunto2.split(',')))

            resultado = ""
            if operacao == "Uni√£o":
                resultado = set1.union(set2)
            elif operacao == "Interse√ß√£o":
                resultado = set1.intersection(set2)
            elif operacao == "Diferen√ßa":
                resultado = set1.difference(set2)
            elif operacao == "Diferen√ßa Sim√©trica":
                resultado = set1.symmetric_difference(set2)

            resultado_label.config(text=f"Resultado: {resultado}", fg="white")
        except ValueError as ve:
            messagebox.showerror("Erro", str(ve))
        except Exception as e:
            messagebox.showerror("Erro", str(e))

    janela = tk.Toplevel(root)
    janela.title("Conjunto de N√∫meros")
    janela.configure(bg="#002147")
    janela.geometry("400x500")

    tk.Label(janela, text="Opera√ß√µes com Conjuntos de N√∫meros", font=("Arial", 16, "bold"), bg="#002147", fg="yellow").pack(pady=10)

    operacao_var = tk.StringVar()
    operacao_var.set("Uni√£o")

    operacoes = ["Uni√£o", "Interse√ß√£o", "Diferen√ßa", "Diferen√ßa Sim√©trica"]
    for operacao in operacoes:
        tk.Radiobutton(janela, text=operacao, variable=operacao_var, value=operacao, font=("Arial", 14), bg="#002147", fg="white").pack(pady=5)

    tk.Label(janela, text="Conjunto 1 (ex: 1,2,3)", bg="#002147", fg="white").pack(pady=5)
    entry_conjunto1 = tk.Entry(janela, font=("Arial", 14), bg="white", fg="black", justify="center")
    entry_conjunto1.pack(pady=5)

    tk.Label(janela, text="Conjunto 2 (ex: 3,4,5)", bg="#002147", fg="white").pack(pady=5)
    entry_conjunto2 = tk.Entry(janela, font=("Arial", 14), bg="white", fg="black", justify="center")
    entry_conjunto2.pack(pady=5)

    resultado_label = tk.Label(janela, text="", font=("Arial", 14, "bold"), bg="#002147", fg="white")
    resultado_label.pack(pady=10)

    botao_calcular = tk.Button(janela, text="Calcular", font=("Arial", 14, "bold"), bg="#FFD700", fg="black", command=calcular_conjunto, relief="raised", borderwidth=3)
    botao_calcular.pack(pady=10)

    fechar_botao = tk.Button(janela, text="Fechar", font=("Arial", 14, "bold"), bg="#FFD700", fg="black", command=janela.destroy)
    fechar_botao.pack(pady=10)

def main():
    global root
    root = tk.Tk()
    root.title("PIM: Calculadora")
    root.geometry("1000x905")
    root.resizable(False, False)
    root.configure(bg="#001F3F")

    # Configurar grid para que os bot√µes se expandam
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=1)

    # Criar t√≠tulo
    titulo_label = tk.Label(root, text="‚ö° PIM: Calculadora ‚ö°", font=("Arial", 24, "bold"), fg="yellow", bg="#001F3F")
    titulo_label.grid(row=0, column=0, columnspan=2, pady=20)

    # Adicionar espa√ßo ap√≥s o t√≠tulo
    espaco_label = tk.Label(root, bg="#001F3F", height=2)
    espaco_label.grid(row=1, column=0, columnspan=2)

    # Criar bot√µes estilizados
    funcoes = {
        "‚ûï Somar": somar,
        "‚ûñ Subtrair": subtrair,
        "‚úñ Multiplicar": multiplicar,
        "‚ûó Dividir": dividir,
        "‚ö° Pot√™ncia": potencia,
        "üìè Raiz Quadrada": raiz_quadrada,
        "üìê Bhaskara": bhaskara,
        "üìä Sistema Linear": sistema_linear,
        "üìè Regra de 3 Simples": regra_de_tres,
        "üìè Regra de 3 Composta": regra_de_tres_composta,
        "üìö Conjunto de N√∫meros": conjunto_numeros,
        "üî¢ Express√µes Alg√©bricas": resolver_expressao,
        "‚öñÔ∏è Propor√ß√£o": proporcao
    }

    # Organize the buttons in two columns
    row = 2
    col = 0

    for nome, funcao in funcoes.items():
        botao = tk.Button(root, text=nome, font=("Arial", 14, "bold"), bg="#FFD700", fg="black", 
                          command=partial(abrir_janela, nome, funcao))
        botao.grid(row=row, column=col, pady=10, padx=10, sticky="nsew")
        col += 1
        if col > 1:  # move para a pr√≥xima linha ap√≥s a segunda coluna
            col = 0
            row += 1

    root.mainloop()

if __name__ == "__main__":
    main()
